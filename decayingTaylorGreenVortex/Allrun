#!/bin/bash
cd "${0%/*}" || exit    # Run from this directory

# Source required functions
. $WM_PROJECT_DIR/bin/tools/RunFunctions
source solids4FoamScripts.sh

# Build the helper libraries
(cd src && ./Allwmake -j -s)

# Build helper utilities
wmake -j -s all utilities

# Define configurations as space-separated strings
configs=(
    "BASE=base NAME=hex.lu GRADED=1 \
    MOVING=0 ORTHOGONAL=0 \
    SMOOTHLYDISTORT=1 PERTURB=0 BUMP=0 \
    PIMPLEFOAM=1"
)
# BASE:            name of the base template case
# NAME:            base name given to each case that is created
# GRADED:          graded or uniform initial mesh
# MOVING:          moving or static mesh
# ORTHOGONAL:      orthogonal or general prescribed mesh motion (if MOVING is
#                  enabled)
# SMOOTHLYDISTORT: apply a smooth distortion to the initial mesh using
#                  smoothlyDistortMeshPoints
# BUMP:            bump or sinusoidal version of smoothlyDistortMeshPoints (if
#                  SMOOTHLYDISTORT is enabled)
# PERTURB:         apply a random perturbtation to the initial mesh using
#                  perturbMeshPoints
# PIMPLEFOAM:      use the pimpleFoam or solids4Foam solver

# Define start and end mesh indices
# Mesh input files are defined from 1 to 7
# END_MESH should be greater than START_MESH
START_MESH=1
END_MESH=5

# Detect the CPU type: we append this to the case name
if [[ "$OSTYPE" == "darwin"* ]]
then
    # macOS
    CPU_TYPE=$(sysctl -n machdep.cpu.brand_string | sed 's/[^a-zA-Z0-9]/_/g')
elif [[ -f /proc/cpuinfo ]]
then
    # Linux
    CPU_TYPE=$(grep -m 1 "model name" /proc/cpuinfo | awk -F': ' '{print $2}' | sed 's/[^a-zA-Z0-9]/_/g')
else
    # Fallback if neither method works
    CPU_TYPE="Unknown_CPU"
fi

# Create timestamped working directory for this run
DATE_TIME=$(date +%Y%m%d_%H%M%S)
RUN_DIR="run_${CPU_TYPE}_${DATE_TIME}"
echo "Creating ${RUN_DIR}"
mkdir "${RUN_DIR}"

# Enter the run directory
cd "${RUN_DIR}"

# Iterate through configurations
for config in "${configs[@]}"
do
    # Parse the configuration string
    eval $config
    echo; echo "***************************************"
    echo "Running configuration: $config"
    echo "***************************************"

    # Define results summary file name
    SUMMARY="${NAME}.summary.txt"
    echo "# Mesh Time Mem U_L1 U_L2 U_Linf" > "${SUMMARY}"

    # Loop over mesh densities in each configuration
    for i in $(seq $START_MESH $END_MESH)
    do
        CASE="${NAME}.$i"
        echo; echo "Processing case: $CASE"

        # Prepare the case
        cp -r "../${BASE}" "${CASE}"
        cd "$CASE"

        # Copy the dynamicCode directory to avoid re-building it each time
        if [ ! -d dynamicCode ]
        then
            if [ "$i" -gt 1 ]
            then
                echo "Copying ../${NAME}.1/dynamicCode to $CASE"
                cp -r ../${NAME}.1/dynamicCode .
            fi
        fi

        # Set the dynamicMeshDict
        if [ "$MOVING" -eq 1 ]
        then
            if [ "$ORTHOGONAL" -eq 1 ]
            then
                echo "Copying constant/dynamicMeshDict.orthogonal.moving to \
                      constant/dynamicMeshDict"
                \cp constant/dynamicMeshDict.orthogonal.moving \
                    constant/dynamicMeshDict
            else
                echo "Copying constant/dynamicMeshDict.general.moving to \
                      constant/dynamicMeshDict"
                \cp constant/dynamicMeshDict.general.moving \
                    constant/dynamicMeshDict
            fi
        else
            echo "Copying constant/dynamicMeshDict.static to constant/dynamicMeshDict"
            \cp constant/dynamicMeshDict.static constant/dynamicMeshDict
        fi

        # Set the blockMeshDict
        BLOCKMESHDICT="system/blockMeshDict.uniform.$i"
        if [ "$GRADED" -eq 1 ]
        then
            BLOCKMESHDICT="system/blockMeshDict.graded.$i"
        fi
        echo "Using ${BLOCKMESHDICT}"

        if [[ ! -f "${BLOCKMESHDICT}" ]]
        then
            echo "Cannot find ${CASE}/${BLOCKMESHDICT}: please add it to ${BASE}/system/"
            echo
            exit 1;
        fi

        # Copy 0.orig to 0
        cp -r 0.orig 0

        # Create the mesh
        solids4Foam::runApplication blockMesh -dict "${BLOCKMESHDICT}"

        # Optional mesh distortion
        if [ "$SMOOTHLYDISTORT" -eq 1 ]
        then
            if [ "$BUMP" -eq 1 ]
            then
                echo "Copying system/smoothlyDistortMeshPointsDict.bump to \
                      system/smoothlyDistortMeshPointsDict"
                \cp system/smoothlyDistortMeshPointsDict.bump \
                    system/smoothlyDistortMeshPointsDict
            else
                echo "Copying system/smoothlyDistortMeshPointsDict.sine to \
                      system/smoothlyDistortMeshPointsDict"
                \cp system/smoothlyDistortMeshPointsDict.sine \
                    system/smoothlyDistortMeshPointsDict
            fi

            solids4Foam::runApplication smoothlyDistortMeshPoints
        fi

        # Optional mesh distortion
        if [ "$PERTURB" -eq 1 ]
        then
            solids4Foam::runApplication perturbMeshPoints
        fi

        # Initialise the velocity and pressure initial fields with the
        # analytical solutions
        solids4Foam::runApplication initialiseTaylorGreenVortex

        # Set the solver
        SOLVER="solids4Foam"

        # Replace setting files for pimpleFoam
        if [ "$PIMPLEFOAM" -eq 1 ]
        then
            echo "Copying system/fvSolution.pimpleFoam to system/fvSolution"
            \cp system/fvSolution.pimpleFoam system/fvSolution

            echo "Copying system/fvSchemes.pimpleFoam to system/fvSchemes"
            \cp system/fvSchemes.pimpleFoam system/fvSchemes

            SOLVER="pimpleFoam"
        fi

        # Set the log file name
        LOG="log.$SOLVER"

        # Run the solver
        # If "gtime" is available (could be called "time" on Linux), use it to
        # record the max memory usage
        export DYLD_LIBRARY_PATH="$DYLD_LIBRARY_PATH:$FOAM_LIBBIN:$FOAM_USER_LIBBIN"
        if command -v gtime &> /dev/null
        then
            echo "Running $SOLVER on ${CASE} with gtime"
            gtime -f "Maximum resident set size (kbytes): %M" $SOLVER &> $LOG
        elif command -v time &> /dev/null
        then
            echo "Running $SOLVER on ${CASE} with time"
            time -f "Maximum resident set size (kbytes): %M" $SOLVER &> $LOG
        else
            echo "Running $SOLVER on ${CASE}"
            $SOLVER &> $LOG
        fi

        # Extract results from solver log and append them to a summary file
        echo; echo "Appending results to ${SUMMARY}"
        if grep -q "Maximum resident" $LOG; then
            MAX_MEMORY=$(grep "Maximum resident" $LOG | awk '{print int($6 / 1000)}')
        else
            MAX_MEMORY="NaN"
        fi

        # Record the time
        CLOCK_TIME=$(grep -n "ClockTime" $LOG | tail -n 1 | awk '{print $7}')

        # Extract the L1 (average) error for velocity
        U_L1_ERROR=$(grep -n "mean L1" $LOG | awk '{print $5}')

        # Extract the L2 (average) error for velocity
        U_L2_ERROR=$(grep -n "mean L2" $LOG | awk '{print $5}')

        # Extract the LInfinity (max) error for velocity
        U_LINF_ERROR=$(grep -n "LInf" $LOG | awk '{print $4}')

        # Write data to file
        echo "$i $CLOCK_TIME $MAX_MEMORY $U_L1_ERROR $U_L2_ERROR $U_LINF_ERROR" >> ../"${SUMMARY}"

        cd ..
    done

    # Print summary file
    echo; echo "${SUMMARY} file:"; cat "${SUMMARY}"; echo

    # Calculate the order of accuracy from the summary file
    ORDER="${NAME}.orderOfAccuracy.txt"
    echo; echo "Creating ${ORDER} file"
    echo "# Mesh L1 L2 LInf" > "${ORDER}"
    awk 'NR > 2 {print NR-2, log(prev4/$4)/log(2), log(prev5/$5)/log(2), log(prev6/$6)/log(2)} {prev4=$4; prev5=$5; prev6=$6}' "${SUMMARY}" >> "${ORDER}"
    cat "${ORDER}"
done

# Create plots if gnuplot in installed
if command -v gnuplot &>/dev/null
then
    # Copy gnuplot scripts
    cp ../plotScripts/*gnuplot .
    cp ../plotScripts/orderOfAccuracySlopes*.dat .

    # Run all scripts
    echo
    for f in *gnuplot
    do
        echo "Running gnuplot on $f"
        gnuplot "$f"
    done
fi

# Exit the run directory
cd ..

echo; echo; echo "Done!"; echo
echo "View the PDF files in ${RUN_DIR}"
echo; date
echo; echo
