#!/usr/bin/env bash
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
# Options
#     -p
#         if passed, runs the case in parallel
#
# Optional environment variables
#     Mesh density level
:     "${MESH_LEVEL:=1}"
#     Number of mesh subdomains (only used in parallel run)
:     "${NUMBER_OF_SUBDOMAINS:=4}"
#     Fluid model to be called by solids4Foam (pimpleFluid, newtonIcoFluid)
:     "${FLUID_MODEL:=pimpleFluid}"
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
cd "${0%/*}" || exit    # Run from this directory

# Source tutorial run functions
. $WM_PROJECT_DIR/bin/tools/RunFunctions

# Generate the mesh
MESH_LEVEL=${MESH_LEVEL} runApplication blockMesh

if [ "$1" = '-p' ];
then
    # Decopose mesh
    NUMBER_OF_SUBDOMAINS=${NUMBER_OF_SUBDOMAINS} runApplication decomposePar

    # Run the solver (parallel)
    FLUID_MODEL=${FLUID_MODEL} runParallel $(getApplication)

    # Deconstruct the result
    runApplication reconstructPar -no-fields -latestTime
else
    # Run the solver (serial)
    FLUID_MODEL=${FLUID_MODEL} runApplication $(getApplication)
fi

# Generate the plots
# NOTE(abzrg): For testing purposes and sanity checks I plotted the force
#              coefficients in two ways:
#              1) using the data from `forces` function object,
#              2) using the data from `forceCoeffs` function object.
cp ../plotScripts/*.gnuplot .
cp ../validationData/*.dat .

for script in ./*.gnuplot
do
    gnuplot -c "${script}"
done
